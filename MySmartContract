pragma solidity  >=0.5.0 <0.7.0;


//import @ERC20Interface


contract MariiaSToken {
    
    string tokenName;
    string tokenSymbol;
    uint256 decimals;
    uint256 totalAmount;
    
    // mapping(address => uint256) public amount;
    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;
    
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);

    constructor(string memory _name, string memory _symbol, uint _decimals, uint _totalSupply) public {
        tokenName = _name;
        tokenSymbol = _symbol;
        decimals = _decimals;
        totalAmount = _totalSupply; 
        balanceOf[msg.sender] = totalAmount;
    }
    
    // constructor() public {
    //     tokenName = "MariiaToken";
    //     tokenSymbol = "MST";
    //     totalAmount = 100000;
    //     decimals = 18;
    //     balanceOf[msg.sender] = totalAmount;
    // }
    
    function totalSupply() public view returns(uint256){
        return totalAmount;
    }
    

    function transfer(address _to, uint256 _value) public returns(bool){
        require(_value <= balanceOf[msg.sender], "Insufficient balance.");
        balanceOf[msg.sender] = balanceOf[msg.sender] - _value;
        balanceOf[_to] = balanceOf[_to] + _value;
        return true;
    }
    
    function _transfer(address _from, address _to, uint256 _value) internal {
        // Ensure sending is to valid address! 0x0 address cane be used to burn() 
        require(_to != address(0));
        balanceOf[_from] = balanceOf[_from] - (_value);
        balanceOf[_to] = balanceOf[_to] + (_value);
        emit Transfer(_from, _to, _value);
    }
    
    function _mintTo(address receiver, uint256 _amount) public{
        // totalAmount += _amount;
        balanceOf[receiver] += _amount;
    }
    
    receive() external payable {
         _mintTo(msg.sender, msg.value * 100);
    }
}
